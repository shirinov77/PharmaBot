package org.example.pharmaproject.bot.utils;

import org.example.pharmaproject.entities.Basket;
import org.example.pharmaproject.entities.Category;
import org.example.pharmaproject.entities.Order;
import org.example.pharmaproject.entities.Product;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

public class BotUtils {

    private static final Map<String, Map<String, String>> messages = new HashMap<>();

    static {
        initializeMessages();
    }

    public static InlineKeyboardMarkup createLanguageInlineKeyboard() {
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(List.of(
                createButton("üá∫üáø O‚Äòzbekcha", "lang_uz"),
                createButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "lang_ru"),
                createButton("üá¨üáß English", "lang_en")
        ));
        return new InlineKeyboardMarkup(rows);
    }

    public static InlineKeyboardMarkup createCategoryInlineKeyboard(List<Category> categories, String lang) {
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        for (Category category : categories) {
            rows.add(List.of(createButton(category.getName(), "category_" + category.getId())));
        }
        rows.add(List.of(createButton(getLocalizedMessage(lang, "back_to_menu"), "BACK_TO_MENU")));
        return new InlineKeyboardMarkup(rows);
    }

    public static InlineKeyboardMarkup createProductsInlineKeyboard(List<Product> products, String lang) {
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        for (Product product : products) {
            rows.add(List.of(createButton(product.getName(), "product_" + product.getId())));
        }
        rows.add(List.of(createButton(getLocalizedMessage(lang, "back_to_menu"), "BACK_TO_MENU")));
        return new InlineKeyboardMarkup(rows);
    }

    public static InlineKeyboardMarkup createProductDetailsInline(String productId, String lang) {
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(List.of(
                createButton(getLocalizedMessage(lang, "add_to_basket"), "add_to_basket_" + productId)
        ));
        rows.add(List.of(
                createButton(getLocalizedMessage(lang, "back_to_menu"), "BACK_TO_MENU")
        ));
        return new InlineKeyboardMarkup(rows);
    }

    public static InlineKeyboardMarkup createBasketManagementKeyboard(Basket basket, String lang) {
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        if (basket.getProducts() != null && !basket.getProducts().isEmpty()) {
            Map<Product, Long> productCounts = basket.getProducts().stream()
                    .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
            for (Map.Entry<Product, Long> entry : productCounts.entrySet()) {
                Product product = entry.getKey();
                rows.add(List.of(
                        createButton("-", "basket_decrease_" + product.getId()),
                        createButton(entry.getValue().toString(), "IGNORE"),
                        createButton("+", "basket_increase_" + product.getId()),
                        createButton("‚ùå", "basket_remove_" + product.getId())
                ));
            }
            rows.add(List.of(
                    createButton(getLocalizedMessage(lang, "clear_basket"), "basket_clear"),
                    createButton(getLocalizedMessage(lang, "checkout"), "basket_checkout")
            ));
        }
        rows.add(List.of(createButton(getLocalizedMessage(lang, "back_to_menu"), "BACK_TO_MENU")));
        return new InlineKeyboardMarkup(rows);
    }

    public static InlineKeyboardMarkup createOrdersInlineKeyboard(List<Order> orders, String lang) {
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        for (Order order : orders) {
            if (order.getStatus() == Order.Status.PENDING) {
                rows.add(List.of(
                        createButton("#" + order.getId() + " ‚úÖ", "order_" + order.getId() + "_confirm"),
                        createButton("#" + order.getId() + " ‚ùå", "order_" + order.getId() + "_cancel")
                ));
            }
        }
        rows.add(List.of(createButton(getLocalizedMessage(lang, "back_to_menu"), "BACK_TO_MENU")));
        return new InlineKeyboardMarkup(rows);
    }

    public static InlineKeyboardMarkup createBackToMenuKeyboard(String lang) {
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(List.of(createButton(getLocalizedMessage(lang, "back_to_menu"), "BACK_TO_MENU")));
        return new InlineKeyboardMarkup(rows);
    }

    public static ReplyKeyboardMarkup getMainKeyboard(String lang) {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setSelective(true);
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow row1 = new KeyboardRow();
        row1.add(getLocalizedMessage(lang, "menu_button"));
        row1.add(getLocalizedMessage(lang, "basket_button"));
        keyboard.add(row1);

        KeyboardRow row2 = new KeyboardRow();
        row2.add(getLocalizedMessage(lang, "orders_button"));
        row2.add(getLocalizedMessage(lang, "search_button"));
        keyboard.add(row2);

        KeyboardRow row3 = new KeyboardRow();
        row3.add(getLocalizedMessage(lang, "language_button"));
        keyboard.add(row3);

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    public static ReplyKeyboardMarkup createPhoneRequestKeyboard(String lang) {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setSelective(true);
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);

        List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow row = new KeyboardRow();
        KeyboardButton button = new KeyboardButton(getLocalizedMessage(lang, "share_phone"));
        button.setRequestContact(true);
        row.add(button);
        keyboard.add(row);

        KeyboardRow cancelRow = new KeyboardRow();
        cancelRow.add(getLocalizedMessage(lang, "cancel_button"));
        keyboard.add(cancelRow);

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    public static ReplyKeyboardMarkup createLocationRequestKeyboard(String lang) {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setSelective(true);
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);

        List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow row = new KeyboardRow();
        KeyboardButton button = new KeyboardButton(getLocalizedMessage(lang, "share_location"));
        button.setRequestLocation(true);
        row.add(button);
        keyboard.add(row);

        KeyboardRow cancelRow = new KeyboardRow();
        cancelRow.add(getLocalizedMessage(lang, "cancel_button"));
        keyboard.add(cancelRow);

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    private static InlineKeyboardButton createButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callbackData);
        return button;
    }

    public static String getLocalizedMessage(String lang, String key) {
        return messages.getOrDefault(lang.toLowerCase(), messages.get("uz"))
                .getOrDefault(key, key);
    }

    private static void initializeMessages() {
        // Uzbek
        Map<String, String> uz = new HashMap<>();
        uz.put("welcome_message", "Salom! Botimizga xush kelibsiz. üòä");
        uz.put("language_changed", "‚úÖ Til muvaffaqiyatli o‚Äòzgartirildi!");
        uz.put("select_language", "üåê Iltimos, tilni tanlang:");
        uz.put("language_button", "üåê Tilni o‚Äòzgartirish");
        uz.put("menu_button", "üìÅ Mahsulotlar");
        uz.put("basket_button", "üõí Savat");
        uz.put("orders_button", "üìú Mening buyurtmalarim");
        uz.put("search_button", "üîé Qidiruv");
        uz.put("back_to_menu", "‚¨ÖÔ∏è Menyuga qaytish");
        uz.put("cancel_button", "‚ùå Bekor qilish");
        uz.put("add_to_basket", "üõí Savatga qo‚Äòshish");
        uz.put("clear_basket", "Savatni tozalash");
        uz.put("checkout", "Buyurtma berish");
        uz.put("unknown_command", "Kechirasiz, bu buyruq tan olinmadi.");
        uz.put("error_message", "‚ùå Kutilmagan xato yuz berdi. Iltimos, qayta urinib ko‚Äòring.");
        uz.put("n_orders", "Sizda buyurtmalar yo‚Äòq.");
        uz.put("menu_message", "Kategoriyalar ro‚Äòyxati:");
        uz.put("empty_basket", "Sizning savatingiz bo‚Äòsh.");
        uz.put("enter_search_query", "Iltimos, qidiruv so‚Äòrovini kiriting:");
        uz.put("no_results", "Natijalar topilmadi.");
        uz.put("search_results", "Qidiruv natijalari:");
        uz.put("order_created", "Buyurtma #%d muvaffaqiyatli yaratildi!\nManzil: %s");
        uz.put("order_confirmed", "Buyurtma tasdiqlandi.");
        uz.put("order_cancelled", "Buyurtma bekor qilindi.");
        uz.put("invalid_callback", "Noto‚Äòg‚Äòri harakat.");
        uz.put("orders_summary", "Sizning buyurtmalaringiz:");
        uz.put("order_status_pending", "Kutilmoqda");
        uz.put("order_status_confirmed", "Tasdiqlangan");
        uz.put("order_status_cancelled", "Bekor qilingan");
        uz.put("product_added_to_basket", "Mahsulot savatga qo‚Äòshildi.");
        uz.put("basket_cleared", "Savat tozalandi.");
        uz.put("enter_phone", "Iltimos, telefon raqamingizni baham ko'ring:");
        uz.put("enter_address", "Iltimos, manzilingizni baham ko'ring:");
        uz.put("share_phone", "üìû Telefonni baham ko'rish");
        uz.put("share_location", "üìç Manzilni baham ko'rish");
        uz.put("invalid_input", "Noto'g'ri kiritish. Iltimos, qayta urinib ko'ring.");
        messages.put("uz", uz);

        // Russian
        Map<String, String> ru = new HashMap<>();
        ru.put("welcome_message", "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç. üòä");
        ru.put("language_changed", "‚úÖ –Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
        ru.put("select_language", "üåê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:");
        ru.put("language_button", "üåê –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫");
        ru.put("menu_button", "üìÅ –ü—Ä–æ–¥—É–∫—Ç—ã");
        ru.put("basket_button", "üõí –ö–æ—Ä–∑–∏–Ω–∞");
        ru.put("orders_button", "üìú –ú–æ–∏ –∑–∞–∫–∞–∑—ã");
        ru.put("search_button", "üîé –ü–æ–∏—Å–∫");
        ru.put("back_to_menu", "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é");
        ru.put("cancel_button", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å");
        ru.put("add_to_basket", "üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É");
        ru.put("clear_basket", "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É");
        ru.put("checkout", "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑");
        ru.put("unknown_command", "–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–ø–æ–Ω—è—Ç–Ω–∞.");
        ru.put("error_message", "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        ru.put("n_orders", "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.");
        ru.put("menu_message", "–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:");
        ru.put("empty_basket", "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.");
        ru.put("enter_search_query", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞:");
        ru.put("no_results", "–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
        ru.put("search_results", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:");
        ru.put("order_created", "–ó–∞–∫–∞–∑ #%d —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–ê–¥—Ä–µ—Å: %s");
        ru.put("order_confirmed", "–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.");
        ru.put("order_cancelled", "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.");
        ru.put("invalid_callback", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.");
        ru.put("orders_summary", "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:");
        ru.put("order_status_pending", "–û–∂–∏–¥–∞–µ—Ç");
        ru.put("order_status_confirmed", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω");
        ru.put("order_status_cancelled", "–û—Ç–º–µ–Ω—ë–Ω");
        ru.put("product_added_to_basket", "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.");
        ru.put("basket_cleared", "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.");
        ru.put("enter_phone", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:");
        ru.put("enter_address", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∞–¥—Ä–µ—Å–æ–º:");
        ru.put("share_phone", "üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º");
        ru.put("share_location", "üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º");
        ru.put("invalid_input", "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        messages.put("ru", ru);

        // English
        Map<String, String> en = new HashMap<>();
        en.put("welcome_message", "Hello! Welcome to our bot. üòä");
        en.put("language_changed", "‚úÖ Language successfully changed!");
        en.put("select_language", "üåê Please select your language:");
        en.put("language_button", "üåê Change language");
        en.put("menu_button", "üìÅ Products");
        en.put("basket_button", "üõí Basket");
        en.put("orders_button", "üìú My orders");
        en.put("search_button", "üîé Search");
        en.put("back_to_menu", "‚¨ÖÔ∏è Back to menu");
        en.put("cancel_button", "‚ùå Cancel");
        en.put("add_to_basket", "üõí Add to basket");
        en.put("clear_basket", "Clear basket");
        en.put("checkout", "Checkout");
        en.put("unknown_command", "Sorry, this command is not recognized.");
        en.put("error_message", "‚ùå An unexpected error occurred. Please try again.");
        en.put("n_orders", "You have no orders.");
        en.put("menu_message", "Category list:");
        en.put("empty_basket", "Your basket is empty.");
        en.put("enter_search_query", "Please enter your search query:");
        en.put("no_results", "No results found.");
        en.put("search_results", "Search results:");
        en.put("order_created", "Order #%d created successfully!\nAddress: %s");
        en.put("order_confirmed", "Order confirmed.");
        en.put("order_cancelled", "Order cancelled.");
        en.put("invalid_callback", "Invalid action.");
        en.put("orders_summary", "Your orders:");
        en.put("order_status_pending", "Pending");
        en.put("order_status_confirmed", "Confirmed");
        en.put("order_status_cancelled", "Cancelled");
        en.put("product_added_to_basket", "Product added to basket.");
        en.put("basket_cleared", "Basket cleared.");
        en.put("enter_phone", "Please share your phone number:");
        en.put("enter_address", "Please share your address:");
        en.put("share_phone", "üìû Share Phone");
        en.put("share_location", "üìç Share Location");
        en.put("invalid_input", "Invalid input. Please try again.");
        messages.put("en", en);
    }
}